import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public final class Dungeon {
	
	private final Map<Integer, Map<Integer,Chamber>> map = new HashMap<Integer, Map<Integer,Chamber>>();
	private Chamber currChamb;
	private int currX = 0;
	private int currY = 0;
	
	
	private Dungeon(){}
	
	private void putChamb(int x, int y, Chamber chamber){
		if(!map.containsKey(x)){
			map.put(x, new HashMap<Integer,Chamber>());
		}
		map.get(x).put(y, chamber);
	}
	
	private Chamber getChamber(int x, int y){
		return map.get(x).get(y);
	}
	
	private boolean chambExists(int x, int y){
		if (!map.containsKey(x)){
			return false;
		}
		return map.get(x).containsKey(y);
	}
	
	private boolean isDone(){
		return currChamb.isBossRoom() && currChamb.isComplete();
	}
	
	public void moveCharacter(Character character) throws IOException{
		boolean northPoss = chambExists(currX, currY + 1);
        boolean southPoss = chambExists(currX, currY - 1);
        boolean eastPoss = chambExists(currX + 1, currY);
        boolean westPoss = chambExists(currX - 1, currY);
        System.out.print("Where would you like to go? \n");
        if(northPoss || southPoss || eastPoss || westPoss){
        System.out.println("Please select either North(n), South(s), East(e), or West(w), or Heal (h).\n");
        }
        BufferedReader rdr = new BufferedReader(new InputStreamReader(System.in));
        String direction = rdr.readLine();
       /* if (direction.equals("h"))
        {
        	Character.heal();
        }*/
        if (direction.equals("n") && northPoss) {
            currY++;
            System.out.println("You have chosen North! ");
        } 
        if (direction.equals("s") && southPoss) {
        	System.out.println("You have chosen South! ");
        	currY--;
        } 
        if (direction.equals("e") && eastPoss) {
           currX++;
           System.out.println("You have chosen East! ");
        }
        if (direction.equals("w") && westPoss) {
            currX--;
            System.out.println("You have chosen West!");
        }
        if(direction.equals("n")|| direction.equals("w")|| direction.equals("s")|| direction.equals("e")){
        currChamb = getChamber(currX, currY);
        currChamb.enter(character);
        }else 
        	System.out.println("That character is not a valid input. Please select another direction.");
    }

    public void startQuest(Character character) {
        while (character.Alive() && !isDone()) {
            try {
				moveCharacter(character);
			} catch (IOException e) {
				
				e.printStackTrace();
			}
        }
        if (character.Alive()) {
            System.out.println("A HERO!");
        } else {
            System.out.println("RIP");
        }
    }
    public static Dungeon newInstance() {
        Dungeon dungeon = new Dungeon();
        dungeon.putChamb(0, 0, Chamber.newRegularInstance());
        dungeon.putChamb(-1, 1, Chamber.newRegularInstance());
        dungeon.putChamb(0, 1, Chamber.newRegularInstance());
        dungeon.putChamb(1, 1, Chamber.newRegularInstance());
        dungeon.putChamb(-1, 2, Chamber.newRegularInstance());
        dungeon.putChamb(1, 2, Chamber.newRegularInstance());
        dungeon.putChamb(-1, 3, Chamber.newRegularInstance());
        dungeon.putChamb(0, 3, Chamber.newRegularInstance());
        dungeon.putChamb(1, 3, Chamber.newRegularInstance());
        dungeon.putChamb(0, 4, Chamber.newBoss());
        dungeon.currChamb = dungeon.getChamber(0, 0);
        return dungeon;
	}

}
